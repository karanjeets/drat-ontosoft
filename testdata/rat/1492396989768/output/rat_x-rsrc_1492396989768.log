
*****************************************************
Summary
-------
Generated at: 2017-04-16T21:43:10-05:00

Notes: 0
Binaries: 1
Archives: 0
Standards: 10

Apache Licensed: 0
Generated Documents: 0

JavaDocs are generated, thus a license header is optional.
Generated files do not require license headers.

10 Unknown Licenses

*****************************************************

Files with unapproved licenses:

  /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/bcf.R
  /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/brf.R
  /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/climdispatch.R
  /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/dcc.R
  /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/dendroclim.R
  /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/mdcc.R
  /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/mdcplot.R
  /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/nbcf.R
  /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/nbrf.R
  /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/pmat.R

*****************************************************

*****************************************************
  Files with Apache License headers will be marked AL
  Binary files (which do not require any license headers) will be marked B
  Compressed archives will be marked A
  Notices, licenses etc. will be marked N
 !????? /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/bcf.R
 !????? /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/brf.R
 !????? /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/climdispatch.R
 !????? /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/dcc.R
  B     /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/dcplot.R
 !????? /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/dendroclim.R
 !????? /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/mdcc.R
 !????? /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/mdcplot.R
 !????? /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/nbcf.R
 !????? /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/nbrf.R
 !????? /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/pmat.R
 
*****************************************************

 Printing headers for text files without a valid license header...
 
=====================================================
== File: /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/bcf.R
=====================================================
bcf <- function(g, p, sb, vnames, ci = 0.05) {
  n <- length(g)
  m <- dim(p)[2]
  param.matrix <- matrix(NA, nrow = m, ncol = 1000)
  if (sb) { # initialize status bar (if TRUE)
    pb <- txtProgressBar(min = 1,  max = 1000, style = 3)
  }
  for (i in 1:1000) {
    boot.sample <- sample(1:n, n, replace = TRUE)
    boot.g <- g[boot.sample]
    boot.p <- p[boot.sample, ]
    boot.g <- (boot.g - mean(boot.g))/sd(boot.g) # standardize
    boot.p <- apply(boot.p, 2, function(x) { (x - mean(x))/sd(x) }) # standardize
    for (j in 1:m) {
      param.matrix[j, i] <- qr.solve(boot.p[, j], boot.g) # get parameter via singular value decomp
    }
    if (sb) # update status bar (if TRUE)
      setTxtProgressBar(pb, i)
  }
  bcf.coef <- apply(param.matrix, 1, median)
  if (ci == 0.05) {
    ci.lower <- apply(param.matrix, 1, function(x) { sort(x)[25] })
    ci.upper <- apply(param.matrix, 1, function(x) { sort(x)[975] })
  } else {
    if (ci == 0.01) {
      ci.lower <- apply(param.matrix, 1, function(x) { sort(x)[5] })
      ci.upper <- apply(param.matrix, 1, function(x) { sort(x)[995] })
    } else {
      if (ci == 0.1) {
        ci.lower <- apply(param.matrix, 1, function(x) { sort(x)[50] })
        ci.upper <- apply(param.matrix, 1, function(x) { sort(x)[950] })
      } else {
        stop("`ci` must be either 0.1, 0.05, or 0.01.")
      }
    }
  }
  
  ## Significance test
  is.sig <- logical(m)
  for (i in 1:m) {
    if (sign(ci.upper[i]) != sign(ci.lower[i])) {
      is.sig[i] <- FALSE
    } else {
      if (abs(bcf.coef[i]) > abs((abs(ci.upper[i]) - abs(ci.lower[i]))/2)) {
        is.sig[i] <- TRUE
      } else {
        is.sig[i] <- FALSE
      }
    }
  }

=====================================================
== File: /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/brf.R
=====================================================
brf <- function(g, p, sb, vnames, ci = 0.05) {
  n <- length(g)
  m <- dim(p)[2]
  param.matrix <- matrix(NA, nrow = m, ncol = 1000)
  if (sb) { # initialize status bar (if TRUE)
    pb <- txtProgressBar(min = 1,  max = 1000, style = 3)
  } 
  for (i in 1:1000) {
    boot.sample <- sample(1:n, n, replace = TRUE)
    boot.g <- g[boot.sample]
    boot.p <- p[boot.sample, ]
    boot.g <- (boot.g - mean(boot.g))/sd(boot.g) # standardize
    boot.p <- apply(boot.p, 2, function(x) { (x - mean(x))/sd(x) }) # standardize
    cor.mat <- cor(boot.p) # correlation matrix X'X (q*q)
    eigen.decomp <- eigen(cor.mat) # eigenvector decomposition
    eigenvectors <- eigen.decomp$vectors # normalized eigenvectors
    eigenvalues <- eigen.decomp$values
    cumprods <- cumprod(eigenvalues) # PVP criterion: calculate cumulative eigenvalues until value < 1
    reduced.eigenvectors <- eigenvectors[, cumprods > 1] # matrix of reduced eigenvectors (q*m)
    pc.scores <- boot.p %*% reduced.eigenvectors # calculate princ comp scores (n*m)
    k <- qr.solve(pc.scores, boot.g) # calculate solution for Z*K = Y (coefficients) (m*1)
    zeros <- rep(0, length(which(cumprods < 1))) # pad K with zero so that Kq*1
    k <- c(k, zeros) # (q*1)
    b <- eigenvectors %*% k # response coefficients (q*1)
    param.matrix[, i] <- b
    if (sb) # update status bar (if TRUE)
      setTxtProgressBar(pb, i)
  }
  brf.coef <- apply(param.matrix, 1, median)
  if (ci == 0.05) {
    ci.lower <- apply(param.matrix, 1, function(x) { sort(x)[25] })
    ci.upper <- apply(param.matrix, 1, function(x) { sort(x)[975] })
  } else {
    if (ci == 0.01) {
      ci.lower <- apply(param.matrix, 1, function(x) { sort(x)[5] })
      ci.upper <- apply(param.matrix, 1, function(x) { sort(x)[995] })
    } else {
      if (ci == 0.1) {
        ci.lower <- apply(param.matrix, 1, function(x) { sort(x)[50] })
        ci.upper <- apply(param.matrix, 1, function(x) { sort(x)[950] })
      } else {
        stop("`ci` must be either 0.1, 0.05, or 0.01.")
      }
    }
  }

  ## Significance test
  is.sig <- logical(m)
  for (i in 1:m) {
    if (sign(ci.upper[i]) != sign(ci.lower[i])) {

=====================================================
== File: /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/climdispatch.R
=====================================================
# takes the raw climate data as argument and checks for formatting:
# a) 4 column style as originally supported
# b) dendroclim style (12 months in one row)
# c) a list of b

climdispatch <- function(x) {
  ## is it a list?
  if (any(class(x) == "list")) {
    ## handle list case
    n <- length(x)
    minyrs <- maxyrs <- numeric(n)
    for (i in 1:n) {                    # loop through list
                                        # members, and get min and max
                                        # years for later reformatting.
      y <- x[[i]]                       # shortcut for current list
                                        # member
      if (dim(y)[2] == 13) {            # explanation see non-list
                                        # case.
        if (!any(y[,1] == seq(y[1,1], y[dim(y)[1],1], 1))) {
          stop("One member in the list supplied as climate data is not properly formatted. see '?dcc' for possible data formats.")
        } else {
          minyrs[i] <- min(y[,1])
          maxyrs[i] <- max(y[,1])
        }
      }
    }
    yrs <- max(minyrs):min(maxyrs)
    nyrs <- length(yrs)
    output.matrix <- matrix(NA, ncol = n + 2, nrow = nyrs*12)
    output.matrix[,1] <- rep(yrs, each = 12)
    output.matrix[,2] <- rep(1:12, nyrs)
    for (i in 1:n) {                    # loop through list again, and
                                        # put everything in place in
                                        # the new output matrix
      y <- x[[i]]                       # shortcut for current list
                                        # member
      for (j in 1:nyrs) {
        if (any(y[,1] == yrs[j])) {     # check, if currently selected
                                        # year is present in current
                                        # list member
          output.matrix[which(output.matrix[,1] == yrs[j]), 2+i] <-
            unlist(y[which(y[,1] == yrs[j]), 2:13]) # write elements
                                        # of specific line into i+2 th
                                        # row of output.matrix
        }                               # don't need else-case, as
                                        # matrix is already filled
                                        # with NA
      }
    }
  } else {

=====================================================
== File: /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/dcc.R
=====================================================
dcc <- function(chrono, clim, method = "response", start = -6, end =
                9, timespan = NULL, vnames = NULL, sb = TRUE, boot =
                TRUE, ci = 0.05) {
  month.ids <- c(-1:-12, 1:12)
  errormsg1 <-
    "start and end have to define an interval in [-1, -2, ..., -12, 1, 2, ..., 12]."
  if (!is.element(start, month.ids) || !is.element(end, month.ids) ||
                which(month.ids == start) > which(month.ids == end)) {
                # check start and end dates
    stop(errormsg1)
  }
  ## climate data dispatcher gets called...
  clim <- climdispatch(clim)                    # properly formatted
                                        # climate data gets returned
                                        # here
  chrono.years <- as.numeric(row.names(chrono)) # get timespan of
                                        # chrono
  clim.years <- sort(unique(clim[, 1])) # get timespan of climate data
  if (chrono.years[1] <= clim.years[1]) {
    overlap <- na.omit(clim.years[match(chrono.years, clim.years)]) # get overlap of timespans
  } else {
    overlap <- na.omit(chrono.years[match(clim.years, chrono.years)])
  }
  if (is.null(timespan)) {
    start.year <- overlap[1]
    end.year <- tail(overlap, 1)
  } else {
    if (start > 0) {
      if (!is.element(timespan[1], overlap) ||
          !is.element(timespan[2], overlap)) {
        errormsg3 <- paste("timespan has to be between ", overlap[1],
                           " and ", tail(overlap, 1),
                           " for start dates in current year.",
                           sep = "")
        stop(errormsg3)
      } else {
        start.year <- timespan[1]
        end.year <- timespan[2]
      }
    } else {
      if (!is.element(timespan[1], overlap) ||
          !is.element(timespan[2], overlap)) {
        errormsg4 <- paste("timespan has to be between ", overlap[1] +
                           1, " and ", tail(overlap, 1),
                           " for start dates in previous year.", sep = "")
        stop(errormsg4)
      } else {
        start.year <- timespan[1]
        end.year <- timespan[2]
      }

=====================================================
== File: /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/dendroclim.R
=====================================================
dendroclim <- dcc

=====================================================
== File: /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/mdcc.R
=====================================================
mdcc <- function(chrono, clim, method = "response", start = 4, end =
                 9, timespan = NULL, vnames = NULL, sb = TRUE,
                 win.size = 25, win.offset = 1, startlast = TRUE,
                 boot = FALSE, ci = 0.05) {

  month.ids <- c(-1:-12, 1:12)
  errormsg1 <-
    "start and end have to define an interval in [-1, -2, ..., -12, 1, 2, ..., 12]."
  if (!is.element(start, month.ids) || !is.element(end, month.ids) ||
      which(month.ids == start) > which(month.ids == end)) {
                                        # check start and end dates
    stop(errormsg1)
  }
  ## climate data dispatcher gets called...
  clim <- climdispatch(clim)                    # properly formatted
                                        # climate data gets returned
                                        # here

  if (start*end > 0) {
    no.params <- (dim(clim)[2] -2)*length(start:end)
  } else {
    no.params <- (dim(clim)[2] -2)*length(start:end)-1 # 0 is not counted
  }
  ## raise error, when window size is smaller than number of params
  if (no.params > win.size) {
    win.size.msg <-
      paste("Window size is smaller than number of parameters! Consider adapting win.size to a minimum of ",
            no.params, ".", sep = "")
    stop(win.size.msg)
  }
  chrono.years <- as.numeric(row.names(chrono)) # get timespan of
                                        # chrono
  clim.years <- sort(unique(clim[, 1])) # get timespan of climate data
  if (chrono.years[1] <= clim.years[1]) {
    overlap <- na.omit(clim.years[match(chrono.years, clim.years)]) # get overlap of timespans
  } else {
    overlap <- na.omit(chrono.years[match(clim.years, chrono.years)])
  }
  if (is.null(timespan)) {
    start.year <- overlap[1]
    end.year <- tail(overlap, 1)
  } else {
    if (start > 0) {
      if (!is.element(timespan[1], overlap) ||
          !is.element(timespan[2], overlap)) {
        errormsg3 <- paste("timespan has to be between ", overlap[1],
                           " and ", tail(overlap, 1),
                           " for start dates in current year.",
                           sep = "")
        stop(errormsg3)

=====================================================
== File: /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/mdcplot.R
=====================================================
mdcplot <- function(x, rescale = TRUE, ...) {

  ## check if x is a single data.frame as returned by the old version
  ## of mdcc, or a list of data.frames as returned by the newer
  ## version (> 1.2.2); if the first is true, only take the coefs
  if (!is.data.frame(x)) {
    x <- x$coef
  }

  blues <- colorRamp(c("#FFFFFF", "#395cd4"))
  reds <- colorRamp(c("#FFFFFF", "#dd291c"))

  m <- dim(x)[1]                        # parameters
  n <- dim(x)[2]                        # time steps

  xs <- x[m:1,]                         # invert rows for plotting "bottom-up"
    
  if (rescale) {
    pos.max <- max(x)
    neg.max <- abs(min(x))
  }
  
  ## plot frame

  op <- par(no.readonly = TRUE)
  par(oma = c(2,3,0.1,5), mai = c(1, 0.8, 0.2, 1))
  plot(c(0.4, n + 0.4), c(0.4, m + 0.4), type = "n", xaxt = "n", yaxt
       = "n", ylab = "", xlab = "", ...)

  axis(side = 1, at = 1:n, labels = colnames(x), las = 2)
  axis(side = 2, at = 1:m, labels = rev(rownames(x)), las = 1)

  for (i in 1:m) {
    for (j in 1:n) {
      if (xs[i,j] <= 0) {
        
        polygon(c(j-0.4, j+0.4, j+0.4, j-0.4), c(i-0.4, i-0.4, i+0.4,
                                                 i+0.4), lty = 0, col =
                ifelse(rescale,
                       rgb(reds(abs(xs[i,j])/neg.max),
                           maxColorValue = 255),
                       rgb(reds(abs(xs[i,j])),
                           maxColorValue = 255)))

      } else {

        polygon(c(j-0.4, j+0.4, j+0.4, j-0.4), c(i-0.4, i-0.4, i+0.4,
                                                 i+0.4), lty = 0, col =
                ifelse(rescale,
                       rgb(blues(xs[i,j]/pos.max),

=====================================================
== File: /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/nbcf.R
=====================================================
## non-bootstrapped correlation function
nbcf <- function(g, p, vnames) {
  n <- length(g)
  m <- dim(p)[2]
  params <- numeric(m)
  g <- (g - mean(g))/sd(g) # standardize
  p <- apply(p, 2, function(x) { (x - mean(x))/sd(x) }) # standardize
  for (j in 1:m) {
    params[j] <- qr.solve(p[, j], g) # get parameter via singular value decomp
  }
  cf.coef <- params
  ci.lower <- NA
  ci.upper <- NA
  is.sig <- NA
  out <- data.frame(coef = cf.coef, significant = is.sig, ci.lower = ci.lower, ci.upper = ci.upper)
  rownames(out) <- colnames(p)
  attributes(out)$npar <- attributes(p)$npar
  attributes(out)$vnames <- vnames
  out
}

=====================================================
== File: /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/nbrf.R
=====================================================
## non-bootstrapped version of brf
nbrf <- function(g, p, vnames) {
  n <- length(g)
  g <- (g - mean(g))/sd(g) # standardize
  p <- apply(p, 2, function(x) { (x - mean(x))/sd(x) }) # standardize
  cor.mat <- cor(p) # correlation matrix X'X (q*q)
  eigen.decomp <- eigen(cor.mat) # eigenvector decomposition
  eigenvectors <- eigen.decomp$vectors # normalized eigenvectors
  eigenvalues <- eigen.decomp$values
  cumprods <- cumprod(eigenvalues) # PVP criterion: calculate cumulative eigenvalues until value < 1
  reduced.eigenvectors <- eigenvectors[, cumprods > 1] # matrix of reduced eigenvectors (q*m)
  pc.scores <- p %*% reduced.eigenvectors # calculate princ comp scores (n*m)
  k <- qr.solve(pc.scores, g) # calculate solution for Z*K = Y (coefficients) (m*1)
  zeros <- rep(0, length(which(cumprods < 1))) # pad K with zero so that Kq*1
  k <- c(k, zeros) # (q*1)
  b <- eigenvectors %*% k # response coefficients (q*1)
  rf.coef <- b
  ci.lower <- NA
  ci.upper <- NA
  is.sig <- NA
  out <- data.frame(coef = rf.coef, significant = is.sig, ci.lower = ci.lower, ci.upper = ci.upper)
  rownames(out) <- colnames(p)
   attributes(out)$npar <- attributes(p)$npar
  attributes(out)$vnames <- vnames
  out
}

=====================================================
== File: /gpfs/flash/users/tg830544/drat-ontosoft/deploy/data/jobs/rat/1492396989768/input/pmat.R
=====================================================
pmat <- function(x, start = -6, end = 9, vnames = NULL) {
  years <- unique(x[, 1])
  n <- length(years)
  no.vars <- dim(x)[2] - 2 # number of variables
  months <- paste(c(rep("prev.", 12), rep("curr.", 12)), rep(c("jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"), 2), sep = "")
  month.ids <- c(-1:-12, 1:12)
  used.months <- months[which(month.ids == start):which(month.ids == end)]
  no.months <- length(used.months)

  ## check for specified variable names, else default to colnames of
  ## x, if not present to V1, V2 etc.
  if (is.null(vnames) || length(unique(vnames)) != no.vars) {
    if (!is.null(colnames(x))) {
      vnames <- colnames(x)[3:(no.vars+2)]		
    } else {
      vnames <- paste(rep("V", no.vars), 1:no.vars, sep = "")
    }	
  }

  ## create unique names for variables
  vnames.mat <- matrix(NA, nrow = no.months, ncol = no.vars) 
  for (i in 1:no.vars) {
    vnames.mat[, i] <- paste(vnames[i], ".", used.months, sep = "")
  }
  
  m <- matrix(NA, nrow = no.months*no.vars, ncol = n - 1)
  colnames(m) <- years[-1]
  rownames(m) <- as.vector(vnames.mat)
  
  for (i in 2:n) {
    if (start < 0) {
      start.with <- which(x[, 1] == years[i - 1])[abs(start)] # start month in previous year
    } else {
      start.with <- which(x[, 1] == years[i])[start] # start month in current year
    }
    for (k in 1:no.vars) { # loop through variables
      for (j in 1:no.months) { # loop through months
        m[(j + (no.months*(k-1))), (i - 1)] <- x[(start.with + j - 1), 2+k]
      }
    }
  }
  
  pmatrix <- as.data.frame(t(m))
  attributes(pmatrix)$npar <- no.vars
  
  pmatrix
}

